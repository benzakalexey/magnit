"""migration

Revision ID: a1c0d749d5c2
Revises: 4135a4eb76da
Create Date: 2023-08-05 11:35:17.447832+00:00

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = 'a1c0d749d5c2'
down_revision = '4135a4eb76da'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'contract_services',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
        ),
        sa.Column(
            'name',
            sa.String(),
            nullable=False,
            comment='Наименование услуги',
        ),
        sa.Column(
            'source_id',
            sa.Integer(),
            nullable=True,
            comment='ИД номенклатуры  в 1С',
        ),
        sa.Column(
            'type',
            sa.Enum(
                'WOOD_WASTE',
                'CONSTRUCTION_WASTE',
                name='servicecontracttype',
            ),
            nullable=False,
            comment='Тип услуги',
        ),
        sa.PrimaryKeyConstraint(
            'id',
            name=op.f('pk_contract_services', ),
        ),
        schema='app',
        comment='Справочник услуг по договору на оказание услуг.',
    )
    op.create_table(
        'waste_catalog',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
        ),
        sa.Column(
            'name',
            sa.String(),
            nullable=False,
            comment='Наименование отхода по ФККО',
        ),
        sa.Column(
            'code',
            sa.String(),
            nullable=False,
            comment='Код отхода по ФККО',
        ),
        sa.Column(
            'hazard_class',
            sa.String(),
            nullable=False,
            comment='Класс опасности отхода',
        ),
        sa.PrimaryKeyConstraint(
            'id',
            name=op.f('pk_waste_catalog', ),
        ),
        schema='app',
        comment='Федеральный каталог классификации отходов.',
    )
    op.create_table(
        'services_price',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
        ),
        sa.Column(
            'contract_services_id',
            sa.Integer(),
            nullable=False,
            comment='ИД Услуги',
        ),
        sa.Column(
            'price',
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment='Цена за 1 тонну',
        ),
        sa.Column(
            'valid_from',
            sa.DateTime(),
            nullable=False,
            comment='Действует с',
        ),
        sa.Column(
            'valid_to',
            sa.DateTime(),
            nullable=True,
            comment='Действует до',
        ),
        sa.ForeignKeyConstraint(
            ['contract_services_id'],
            ['app.contract_services.id'],
            name=op.f(
                'fk_services_price_contract_services_id_contract_services', ),
        ),
        sa.PrimaryKeyConstraint(
            'id',
            name=op.f('pk_services_price', ),
        ),
        schema='app',
        comment='Прайс на услуги.',
    )
    op.create_table(
        'service_contracts',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
        ),
        sa.Column(
            'number',
            sa.String(),
            nullable=False,
            comment='Номер договора',
        ),
        sa.Column(
            'valid_from',
            sa.DateTime(),
            nullable=False,
            comment='Действует с',
        ),
        sa.Column(
            'valid_to',
            sa.DateTime(),
            nullable=False,
            comment='Действует до',
        ),
        sa.Column(
            'permit_id',
            sa.Integer(),
            nullable=False,
            comment='ИД пропуска',
        ),
        sa.Column(
            'contract_service_id',
            sa.Integer(),
            nullable=True,
            comment='Услуга',
        ),
        sa.Column(
            'executor_id',
            sa.Integer(),
            nullable=False,
            comment='Исполнитель',
        ),
        sa.Column(
            'executor_person',
            sa.String(),
            nullable=False,
            comment='Представитель Исполнителя',
        ),
        sa.Column(
            'executor_acts_basis',
            sa.String(),
            nullable=False,
            comment='Основания для полномочий Исполнителя',
        ),
        sa.Column(
            'customer_id',
            sa.Integer(),
            nullable=False,
            comment='Заказчик',
        ),
        sa.Column(
            'customer_person',
            sa.String(),
            nullable=False,
            comment='Представитель Заказчика',
        ),
        sa.Column(
            'customer_acts_basis',
            sa.String(),
            nullable=False,
            comment='Основания для полномочий Заказчика',
        ),
        sa.ForeignKeyConstraint(
            ['contract_service_id'],
            ['app.contract_services.id'],
            name=op.f(
                'fk_service_contracts_contract_service_id_contract_services',
            ),
        ),
        sa.ForeignKeyConstraint(
            ['customer_id'],
            ['app.partners.id'],
            name=op.f('fk_service_contracts_customer_id_partners', ),
        ),
        sa.ForeignKeyConstraint(
            ['executor_id'],
            ['app.partners.id'],
            name=op.f('fk_service_contracts_executor_id_partners', ),
        ),
        sa.ForeignKeyConstraint(
            ['permit_id'],
            ['app.permits.id'],
            name=op.f('fk_service_contracts_permit_id_permits', ),
        ),
        sa.PrimaryKeyConstraint(
            'id',
            name=op.f('pk_service_contracts', ),
        ),
        schema='app',
        comment='Договора на оказание услуг.',
    )
    op.create_index(
        op.f('ix_app_service_contracts_number', ),
        'service_contracts',
        ['number'],
        unique=False,
        schema='app',
    )
    op.create_table(
        'service_contract_visits',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
        ),
        sa.Column(
            'checked_in',
            sa.DateTime(),
            nullable=False,
            comment='Время въезда',
        ),
        sa.Column(
            'checked_out',
            sa.DateTime(),
            nullable=True,
            comment='Время выезда',
        ),
        sa.Column(
            'contract_id',
            sa.Integer(),
            nullable=True,
            comment='ИД договора',
        ),
        sa.Column(
            'invoice_num',
            sa.String(length=20),
            nullable=True,
            comment='Номер накладной',
        ),
        sa.Column(
            'operator_in_id',
            sa.Integer(),
            nullable=False,
            comment='ИД оператора въезда',
        ),
        sa.Column(
            'operator_out_id',
            sa.Integer(),
            nullable=True,
            comment='ИД оператора выезда',
        ),
        sa.Column(
            'polygon_id',
            sa.Integer(),
            nullable=False,
            comment='ИД полигона',
        ),
        sa.Column(
            'weight_in',
            sa.Integer(),
            nullable=False,
            comment='Вес въезда',
        ),
        sa.Column(
            'weight_out',
            sa.Integer(),
            nullable=True,
            comment='Вес выезда',
        ),
        sa.ForeignKeyConstraint(
            ['contract_id'],
            ['app.service_contracts.id'],
            name=op.f(
                'fk_service_contract_visits_contract_id_service_contracts', ),
        ),
        sa.ForeignKeyConstraint(
            ['operator_in_id'],
            ['app.users.id'],
            name=op.f('fk_service_contract_visits_operator_in_id_users', ),
        ),
        sa.ForeignKeyConstraint(
            ['operator_out_id'],
            ['app.users.id'],
            name=op.f('fk_service_contract_visits_operator_out_id_users', ),
        ),
        sa.ForeignKeyConstraint(
            ['polygon_id'],
            ['app.polygons.id'],
            name=op.f('fk_service_contract_visits_polygon_id_polygons', ),
        ),
        sa.PrimaryKeyConstraint(
            'id',
            name=op.f('pk_service_contract_visits', ),
        ),
        schema='app',
        comment='Визиты по Договорам на оказание услуг.',
    )
    op.create_index(
        op.f('ix_app_service_contract_visits_checked_in', ),
        'service_contract_visits',
        ['checked_in'],
        unique=False,
        schema='app',
    )
    op.add_column(
        'partner_details',
        sa.Column(
            'bank',
            sa.String(),
            nullable=True,
        ),
        schema='app',
    )
    op.add_column(
        'partner_details',
        sa.Column(
            'settlement_account',
            sa.String(),
            nullable=True,
        ),
        schema='app',
    )
    op.add_column(
        'partner_details',
        sa.Column(
            'correspondent_account',
            sa.String(),
            nullable=True,
        ),
        schema='app',
    )
    op.add_column(
        'partner_details',
        sa.Column('e_mail', sa.String(), nullable=True),
        schema='app',
    )
    op.alter_column(
        'permits',
        'truck_id',
        existing_type=sa.INTEGER(),
        nullable=True,
        schema='app',
    )
    op.drop_column(
        'visits',
        'frozen',
        schema='app',
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'visits',
        sa.Column(
            'frozen',
            sa.BOOLEAN(),
            server_default=sa.text('false', ),
            autoincrement=False,
            nullable=False,
        ),
        schema='app',
    )
    op.alter_column(
        'permits',
        'truck_id',
        existing_type=sa.INTEGER(),
        nullable=False,
        schema='app',
    )
    op.drop_column(
        'partner_details',
        'e_mail',
        schema='app',
    )
    op.drop_column(
        'partner_details',
        'correspondent_account',
        schema='app',
    )
    op.drop_column(
        'partner_details',
        'settlement_account',
        schema='app',
    )
    op.drop_column(
        'partner_details',
        'bank',
        schema='app',
    )
    op.drop_index(
        op.f('ix_app_service_contract_visits_checked_in', ),
        table_name='service_contract_visits',
        schema='app',
    )
    op.drop_table(
        'service_contract_visits',
        schema='app',
    )
    op.drop_index(
        op.f('ix_app_service_contracts_number', ),
        table_name='service_contracts',
        schema='app',
    )
    op.drop_table(
        'service_contracts',
        schema='app',
    )
    op.drop_table(
        'services_price',
        schema='app',
    )
    op.drop_table(
        'waste_catalog',
        schema='app',
    )
    op.drop_table(
        'contract_services',
        schema='app',
    )
    # ### end Alembic commands ###

"""migration

Revision ID: 8e38143a4566
Revises: b7bf8aaded25
Create Date: 2022-12-20 18:22:08.652151+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8e38143a4566'
down_revision = 'b7bf8aaded25'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'polygons',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=250), nullable=False),
        sa.Column('address', sa.String(length=250), nullable=True),
        sa.Column('location', sa.String(), nullable=True),
        sa.Column('owner_id', sa.Integer(), nullable=False),
        sa.Column('phone_number', sa.String(length=15),
                  nullable=True),
        sa.ForeignKeyConstraint(['owner_id'],
                                ['app.contragents.id'], name=op.f(
                'fk_polygons_owner_id_contragents')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_polygons')),
        schema='app'
    )
    op.create_table(
        'permissions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('permit_id', sa.Integer(), nullable=False),
        sa.Column('operator_id', sa.Integer(), nullable=False),
        sa.Column('contragent_id', sa.Integer(), nullable=False),
        sa.Column('is_tonar', sa.Boolean(), nullable=True),
        sa.Column('expired_at', sa.DateTime(), nullable=False),
        sa.Column('added_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['contragent_id'],
                                ['app.contragents.id'], name=op.f(
                'fk_permissions_contragent_id_contragents')),
        sa.ForeignKeyConstraint(['operator_id'], ['app.users.id'],
                                name=op.f(
                                    'fk_permissions_operator_id_users')),
        sa.ForeignKeyConstraint(['permit_id'], ['app.permits.id'],
                                name=op.f(
                                    'fk_permissions_permit_id_permits')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_permissions')),
        schema='app'
    )
    op.drop_table('permit_log', schema='app')
    op.drop_constraint('fk_visits_destination_id_polygon', 'visits',
                       schema='app', type_='foreignkey')
    op.drop_constraint('fk_secondary_routes_receiver_polygon_id_polygon',
                       'secondary_routes', schema='app', type_='foreignkey')
    op.drop_constraint('fk_secondary_routes_source_polygon_id_polygon',
                       'secondary_routes', schema='app', type_='foreignkey')
    op.drop_constraint('fk_users_polygon_id_polygon', 'users', schema='app',
                       type_='foreignkey')
    op.drop_constraint('fk_copy_visits_destination_id_polygon', 'copy_visits',
                       schema='app',
                       type_='foreignkey')
    op.drop_constraint('fk_copy_visits_polygon_id_polygon', 'copy_visits',
                       schema='app',
                       type_='foreignkey')
    op.drop_constraint('fk_visits_polygon_id_polygon', 'visits', schema='app',
                       type_='foreignkey')
    op.drop_table('polygon', schema='app')
    op.drop_table('copy_visits', schema='app')
    op.add_column('docs_log', sa.Column('title', sa.String(), nullable=False),
                  schema='app')
    op.add_column(
        'docs_log',
        sa.Column(
            'type',
            sa.Enum('PERMIT', 'WEIGHING_ACT',
                    'TRANSPORT_INVOICE', 'REPORT',
                    name='doctype'),
            nullable=False), schema='app')
    op.drop_constraint('fk_docs_log_visit_id_visits', 'docs_log', schema='app',
                       type_='foreignkey')
    op.drop_column('docs_log', 'doc_type', schema='app')
    op.drop_column('docs_log', 'visit_id', schema='app')
    op.drop_column('docs_log', 'doc_name', schema='app')
    op.add_column('permits', sa.Column('number', sa.Integer(), nullable=False),
                  schema='app')
    op.create_index(op.f('ix_app_permits_number'), 'permits', ['number'],
                    unique=False, schema='app')
    op.create_index(op.f('ix_app_permits_vehicle_id'), 'permits',
                    ['vehicle_id'], unique=False, schema='app')
    op.drop_constraint('fk_permits_contragent_id_contragents', 'permits',
                       schema='app', type_='foreignkey')
    op.drop_constraint('fk_permits_operator_id_users', 'permits', schema='app',
                       type_='foreignkey')
    op.drop_constraint('fk_permits_vehicle_id_vehicles', 'permits',
                       schema='app', type_='foreignkey')
    op.create_foreign_key(op.f('fk_permits_vehicle_id_vehicles'), 'permits',
                          'vehicles', ['vehicle_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.drop_column('permits', 'valid_to', schema='app')
    op.drop_column('permits', 'operator_id', schema='app')
    op.drop_column('permits', 'contragent_id', schema='app')
    op.drop_column('permits', 'created_at', schema='app')
    op.drop_column('permits', 'valid_from', schema='app')
    op.create_index(op.f('ix_app_secondary_routes_receiver_polygon_id'),
                    'secondary_routes', ['receiver_polygon_id'], unique=False,
                    schema='app')
    op.create_index(op.f('ix_app_secondary_routes_source_polygon_id'),
                    'secondary_routes', ['source_polygon_id'], unique=False,
                    schema='app')
    op.create_foreign_key(
        op.f('fk_secondary_routes_receiver_polygon_id_polygons'),
        'secondary_routes', 'polygons', ['receiver_polygon_id'], ['id'],
        source_schema='app', referent_schema='app')
    op.create_foreign_key(
        op.f('fk_secondary_routes_source_polygon_id_polygons'),
        'secondary_routes', 'polygons', ['source_polygon_id'], ['id'],
        source_schema='app', referent_schema='app')
    op.drop_constraint('fk_users_contragent_id_contragents', 'users',
                       schema='app', type_='foreignkey')
    op.create_foreign_key(op.f('fk_users_contragent_id_contragents'), 'users',
                          'contragents', ['contragent_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.create_foreign_key(op.f('fk_users_polygon_id_polygons'), 'users',
                          'polygons', ['polygon_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.add_column('vehicle_models',
                  sa.Column('name', sa.String(), nullable=False), schema='app')
    op.drop_column('vehicle_models', 'model', schema='app')
    op.add_column('vehicles',
                  sa.Column('sts_number', sa.String(), nullable=False),
                  schema='app')
    op.alter_column('vehicles', 'production_year',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    schema='app')
    op.drop_constraint('fk_vehicles_model_id_vehicle_models', 'vehicles',
                       schema='app', type_='foreignkey')
    op.create_foreign_key(op.f('fk_vehicles_model_id_vehicle_models'),
                          'vehicles', 'vehicle_models', ['model_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.drop_column('vehicles', 'pts_number', schema='app')
    op.add_column('visits',
                  sa.Column('permission_id', sa.Integer(), nullable=True),
                  schema='app')
    op.drop_constraint('fk_visits_permit_id_permits', 'visits', schema='app',
                       type_='foreignkey')
    op.create_foreign_key(op.f('fk_visits_permission_id_permissions'), 'visits',
                          'permissions', ['permission_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.create_foreign_key(op.f('fk_visits_destination_id_polygons'), 'visits',
                          'polygons', ['destination_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.create_foreign_key(op.f('fk_visits_polygon_id_polygons'), 'visits',
                          'polygons', ['polygon_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.drop_column('visits', 'permit_id', schema='app')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('visits',
                  sa.Column('permit_id', sa.INTEGER(), autoincrement=False,
                            nullable=True), schema='app')
    op.drop_constraint(op.f('fk_visits_polygon_id_polygons'), 'visits',
                       schema='app', type_='foreignkey')
    op.drop_constraint(op.f('fk_visits_destination_id_polygons'), 'visits',
                       schema='app', type_='foreignkey')
    op.drop_constraint(op.f('fk_visits_permission_id_permissions'), 'visits',
                       schema='app', type_='foreignkey')
    op.create_foreign_key('fk_visits_permit_id_permits', 'visits', 'permits',
                          ['permit_id'], ['id'], source_schema='app',
                          referent_schema='app')
    op.create_table(
        'polygon',
        sa.Column('id', sa.INTEGER(), server_default=sa.text(
            "nextval('app.polygon_id_seq'::regclass)"),
                  autoincrement=True, nullable=False),
        sa.Column('name', sa.VARCHAR(length=250),
                  autoincrement=False, nullable=False),
        sa.Column('full_name', sa.VARCHAR(length=250),
                  autoincrement=False, nullable=False),
        sa.Column('address', sa.VARCHAR(length=250),
                  autoincrement=False, nullable=True),
        sa.Column('owner_id', sa.INTEGER(), autoincrement=False,
                  nullable=False),
        sa.Column('phone_number', sa.VARCHAR(length=15),
                  autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['owner_id'],
                                ['app.contragents.id'],
                                name='fk_polygon_owner_id_contragents'),
        sa.PrimaryKeyConstraint('id', name='pk_polygon'),
        schema='app',
        postgresql_ignore_search_path=False
    )
    op.create_foreign_key('fk_visits_polygon_id_polygon', 'visits', 'polygon',
                          ['polygon_id'], ['id'], source_schema='app',
                          referent_schema='app')
    op.create_foreign_key('fk_visits_destination_id_polygon', 'visits',
                          'polygon', ['destination_id'], ['id'],
                          source_schema='app', referent_schema='app')
    op.drop_column('visits', 'permission_id', schema='app')
    op.add_column('vehicles', sa.Column('pts_number', sa.VARCHAR(length=20),
                                        autoincrement=False, nullable=False),
                  schema='app')
    op.drop_constraint(op.f('fk_vehicles_model_id_vehicle_models'), 'vehicles',
                       schema='app', type_='foreignkey')
    op.create_foreign_key('fk_vehicles_model_id_vehicle_models', 'vehicles',
                          'vehicle_models', ['model_id'], ['id'],
                          source_schema='app', referent_schema='app',
                          ondelete='CASCADE')
    op.alter_column('vehicles', 'production_year',
                    existing_type=sa.INTEGER(),
                    nullable=True,
                    schema='app')
    op.drop_column('vehicles', 'sts_number', schema='app')
    op.add_column('vehicle_models',
                  sa.Column('model', sa.VARCHAR(length=20), autoincrement=False,
                            nullable=False), schema='app')
    op.drop_column('vehicle_models', 'name', schema='app')
    op.drop_constraint(op.f('fk_users_polygon_id_polygons'), 'users',
                       schema='app', type_='foreignkey')
    op.drop_constraint(op.f('fk_users_contragent_id_contragents'), 'users',
                       schema='app', type_='foreignkey')
    op.create_foreign_key('fk_users_polygon_id_polygon', 'users', 'polygon',
                          ['polygon_id'], ['id'], source_schema='app',
                          referent_schema='app', ondelete='CASCADE')
    op.create_foreign_key('fk_users_contragent_id_contragents', 'users',
                          'contragents', ['contragent_id'], ['id'],
                          source_schema='app', referent_schema='app',
                          ondelete='CASCADE')
    op.drop_constraint(op.f('fk_secondary_routes_source_polygon_id_polygons'),
                       'secondary_routes', schema='app', type_='foreignkey')
    op.drop_constraint(op.f('fk_secondary_routes_receiver_polygon_id_polygons'),
                       'secondary_routes', schema='app', type_='foreignkey')
    op.create_foreign_key('fk_secondary_routes_source_polygon_id_polygon',
                          'secondary_routes', 'polygon', ['source_polygon_id'],
                          ['id'], source_schema='app', referent_schema='app')
    op.create_foreign_key('fk_secondary_routes_receiver_polygon_id_polygon',
                          'secondary_routes', 'polygon',
                          ['receiver_polygon_id'], ['id'], source_schema='app',
                          referent_schema='app')
    op.drop_index(op.f('ix_app_secondary_routes_source_polygon_id'),
                  table_name='secondary_routes', schema='app')
    op.drop_index(op.f('ix_app_secondary_routes_receiver_polygon_id'),
                  table_name='secondary_routes', schema='app')
    op.add_column('permits', sa.Column('valid_from', postgresql.TIMESTAMP(),
                                       autoincrement=False, nullable=False),
                  schema='app')
    op.add_column('permits', sa.Column('created_at', postgresql.TIMESTAMP(),
                                       autoincrement=False, nullable=False),
                  schema='app')
    op.add_column('permits',
                  sa.Column('contragent_id', sa.INTEGER(), autoincrement=False,
                            nullable=False), schema='app')
    op.add_column('permits',
                  sa.Column('operator_id', sa.INTEGER(), autoincrement=False,
                            nullable=False), schema='app')
    op.add_column('permits', sa.Column('valid_to', postgresql.TIMESTAMP(),
                                       autoincrement=False, nullable=False),
                  schema='app')
    op.drop_constraint(op.f('fk_permits_vehicle_id_vehicles'), 'permits',
                       schema='app', type_='foreignkey')
    op.create_foreign_key('fk_permits_vehicle_id_vehicles', 'permits',
                          'vehicles', ['vehicle_id'], ['id'],
                          source_schema='app', referent_schema='app',
                          ondelete='CASCADE')
    op.create_foreign_key('fk_permits_operator_id_users', 'permits', 'users',
                          ['operator_id'], ['id'], source_schema='app',
                          referent_schema='app')
    op.create_foreign_key('fk_permits_contragent_id_contragents', 'permits',
                          'contragents', ['contragent_id'], ['id'],
                          source_schema='app', referent_schema='app',
                          ondelete='CASCADE')
    op.drop_index(op.f('ix_app_permits_vehicle_id'), table_name='permits',
                  schema='app')
    op.drop_index(op.f('ix_app_permits_number'), table_name='permits',
                  schema='app')
    op.drop_column('permits', 'number', schema='app')
    op.add_column('docs_log', sa.Column('doc_name', sa.VARCHAR(length=250),
                                        autoincrement=False, nullable=False),
                  schema='app')
    op.add_column('docs_log',
                  sa.Column('visit_id', sa.INTEGER(), autoincrement=False,
                            nullable=False), schema='app')
    op.add_column(
        'docs_log',
        sa.Column(
            'doc_type',
            postgresql.ENUM(
                'PERMIT',
                'WEIGHING_ACT',
                'TRANSPORT_INVOICE',
                'REPORT',
                name='doctype'),
            autoincrement=False, nullable=False),
        schema='app')
    op.create_foreign_key(
        'fk_docs_log_visit_id_visits', 'docs_log', 'visits',
        ['visit_id'], ['id'], source_schema='app',
        referent_schema='app', ondelete='CASCADE')
    op.drop_column(
        'docs_log', 'type', schema='app')
    op.drop_column(
        'docs_log', 'title', schema='app')
    op.create_table(
        'copy_visits',
        sa.Column('id', sa.INTEGER(), server_default=sa.text(
            "nextval('app.copy_visits_id_seq'::regclass)"),
                  autoincrement=True, nullable=False),
        sa.Column('visit_id', sa.INTEGER(), autoincrement=False,
                  nullable=False),
        sa.Column('permit_id', sa.INTEGER(), autoincrement=False,
                  nullable=True),
        sa.Column('polygon_id', sa.INTEGER(), autoincrement=False,
                  nullable=False),
        sa.Column('weight_in', sa.INTEGER(), autoincrement=False,
                  nullable=False),
        sa.Column('weight_out', sa.INTEGER(), autoincrement=False,
                  nullable=True),
        sa.Column('driver_id', sa.INTEGER(), autoincrement=False,
                  nullable=True),
        sa.Column('destination_id', sa.INTEGER(),
                  autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['destination_id'],
                                ['app.polygon.id'],
                                name='fk_copy_visits_destination_id_polygon'),
        sa.ForeignKeyConstraint(['driver_id'], ['app.users.id'],
                                name='fk_copy_visits_driver_id_users'),
        sa.ForeignKeyConstraint(['permit_id'], ['app.permits.id'],
                                name='fk_copy_visits_permit_id_permits'),
        sa.ForeignKeyConstraint(['polygon_id'], ['app.polygon.id'],
                                name='fk_copy_visits_polygon_id_polygon'),
        sa.ForeignKeyConstraint(['visit_id'], ['app.visits.id'],
                                name='fk_copy_visits_visit_id_visits',
                                ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name='pk_copy_visits'),
        schema='app'
    )
    op.execute('DROP TYPE ' + 'permitoperationtype')
    op.create_table(
        'permit_log',
        sa.Column('id', sa.INTEGER(), server_default=sa.text(
            "nextval('app.permit_log_id_seq'::regclass)"),
                  autoincrement=True, nullable=False),
        sa.Column('permit_id', sa.INTEGER(), autoincrement=False,
                  nullable=False),
        sa.Column('user_id', sa.INTEGER(), autoincrement=False,
                  nullable=False),
        sa.Column('operated_at', postgresql.TIMESTAMP(),
                  autoincrement=False, nullable=False),
        sa.Column('operation_type',
                  postgresql.ENUM('CREATION', 'PROLONGATION',
                                  'CANCELLATION',
                                  name='permitoperationtype'),
                  autoincrement=False, nullable=False),
        sa.Column('valid_to', postgresql.TIMESTAMP(),
                  autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['permit_id'], ['app.permits.id'],
                                name='fk_permit_log_permit_id_permits',
                                ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['app.users.id'],
                                name='fk_permit_log_user_id_users'),
        sa.PrimaryKeyConstraint('id', name='pk_permit_log'),
        schema='app'
    )
    op.drop_table('permissions', schema='app')
    op.drop_table('polygons', schema='app')
    # ### end Alembic commands ###

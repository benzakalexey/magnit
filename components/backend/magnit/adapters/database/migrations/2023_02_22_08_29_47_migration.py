"""migration

Revision ID: 614471381cea
Revises: 
Create Date: 2023-02-22 08:29:47.147679+00:00

"""
import sqlalchemy as sa
from alembic import op

from magnit.application.constants import UserRole

# revision identifiers, used by Alembic.
revision = 'fddd3d2d4ace'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('drivers',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('surname', sa.String(), nullable=False,
                              comment='Фамилия'),
                    sa.Column('name', sa.String(), nullable=False,
                              comment='Имя'),
                    sa.Column('patronymic', sa.String(), nullable=True,
                              comment='Отчество'),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_drivers')),
                    schema='app'
                    )
    op.create_table('partners',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('short_name', sa.String(), nullable=False),
                    sa.Column('inn', sa.String(), nullable=False),
                    sa.Column('ogrn', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_partners')),
                    schema='app'
                    )
    op.create_table('polygons',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(length=250), nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_polygons')),
                    schema='app'
                    )
    op.create_table('trailers',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('model', sa.String(), nullable=False),
                    sa.Column('reg_number', sa.String(), nullable=False),
                    sa.Column('tara', sa.Integer(), nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_trailers')),
                    schema='app'
                    )
    op.create_table('truck_models',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_truck_models')),
                    schema='app'
                    )
    op.create_table('users',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('phone', sa.BigInteger(), nullable=True),
                    sa.Column('password_hash', sa.LargeBinary(),
                              nullable=False),
                    sa.Column('surname', sa.String(), nullable=False,
                              comment='Фамилия'),
                    sa.Column('name', sa.String(), nullable=False,
                              comment='Имя'),
                    sa.Column('patronymic', sa.String(), nullable=True,
                              comment='Отчество'),
                    sa.Column('is_staff', sa.Boolean(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
                    schema='app'
                    )
    op.create_index(op.f('ix_app_users_phone'), 'users', ['phone'], unique=True,
                    schema='app')
    op.create_table('contracts',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('number', sa.String(), nullable=False),
                    sa.Column('valid_from', sa.DateTime(), nullable=False),
                    sa.Column('valid_to', sa.DateTime(), nullable=False),
                    sa.Column('sender_id', sa.Integer(), nullable=False),
                    sa.Column('carrier_id', sa.Integer(), nullable=True),
                    sa.Column('receiver_id', sa.Integer(), nullable=False),
                    sa.Column('departure_point_id', sa.Integer(),
                              nullable=True),
                    sa.Column('destination_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['carrier_id'], ['app.partners.id'],
                                            name=op.f(
                                                'fk_contracts_carrier_id_partners')),
                    sa.ForeignKeyConstraint(['departure_point_id'],
                                            ['app.polygons.id'], name=op.f(
                            'fk_contracts_departure_point_id_polygons')),
                    sa.ForeignKeyConstraint(['destination_id'],
                                            ['app.polygons.id'], name=op.f(
                            'fk_contracts_destination_id_polygons')),
                    sa.ForeignKeyConstraint(['receiver_id'],
                                            ['app.partners.id'], name=op.f(
                            'fk_contracts_receiver_id_partners')),
                    sa.ForeignKeyConstraint(['sender_id'], ['app.partners.id'],
                                            name=op.f(
                                                'fk_contracts_sender_id_partners')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_contracts')),
                    schema='app'
                    )
    op.create_index(op.f('ix_app_contracts_number'), 'contracts', ['number'],
                    unique=False, schema='app')
    op.create_table('driver_details',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('driver_id', sa.Integer(), nullable=False),
                    sa.Column('license', sa.String(), nullable=False,
                              comment='Водительское удостоверение'),
                    sa.Column('employer_id', sa.Integer(), nullable=True,
                              comment='Работодатель'),
                    sa.Column('added_by_id', sa.Integer(), nullable=True),
                    sa.Column('added_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['added_by_id'], ['app.users.id'],
                                            name=op.f(
                                                'fk_driver_details_added_by_id_users')),
                    sa.ForeignKeyConstraint(['driver_id'], ['app.drivers.id'],
                                            name=op.f(
                                                'fk_driver_details_driver_id_drivers')),
                    sa.ForeignKeyConstraint(['employer_id'],
                                            ['app.partners.id'], name=op.f(
                            'fk_driver_details_employer_id_partners')),
                    sa.PrimaryKeyConstraint('id',
                                            name=op.f('pk_driver_details')),
                    schema='app'
                    )
    op.create_table('partner_details',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('partner_id', sa.Integer(), nullable=False),
                    sa.Column('kpp', sa.String(), nullable=False),
                    sa.Column('address', sa.String(), nullable=False),
                    sa.Column('phone', sa.String(), nullable=True),
                    sa.Column('valid_from', sa.DateTime(), nullable=False),
                    sa.Column('valid_to', sa.DateTime(), nullable=True),
                    sa.Column('added_by_id', sa.Integer(), nullable=True),
                    sa.Column('added_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['added_by_id'], ['app.users.id'],
                                            name=op.f(
                                                'fk_partner_details_added_by_id_users')),
                    sa.ForeignKeyConstraint(['partner_id'], ['app.partners.id'],
                                            name=op.f(
                                                'fk_partner_details_partner_id_partners')),
                    sa.PrimaryKeyConstraint('id',
                                            name=op.f('pk_partner_details')),
                    schema='app'
                    )
    op.create_table('polygon_details',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('polygon_id', sa.Integer(), nullable=False),
                    sa.Column('address', sa.String(), nullable=False),
                    sa.Column('valid_from', sa.DateTime(), nullable=False),
                    sa.Column('valid_to', sa.DateTime(), nullable=True),
                    sa.Column('added_by_id', sa.Integer(), nullable=True),
                    sa.Column('added_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['added_by_id'], ['app.users.id'],
                                            name=op.f(
                                                'fk_polygon_details_added_by_id_users')),
                    sa.ForeignKeyConstraint(['polygon_id'], ['app.polygons.id'],
                                            name=op.f(
                                                'fk_polygon_details_polygon_id_polygons')),
                    sa.PrimaryKeyConstraint('id',
                                            name=op.f('pk_polygon_details')),
                    schema='app'
                    )
    op.create_table('staff',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column(
                        'role',
                        sa.Enum(
                            *[r.name for r in UserRole],
                            name='userrole',
                        ),
                        nullable=False
                    ),
                    sa.Column('polygon_id', sa.Integer(), nullable=True),
                    sa.Column('added_by_id', sa.Integer(), nullable=True),
                    sa.Column('added_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['added_by_id'], ['app.users.id'],
                                            name=op.f(
                                                'fk_staff_added_by_id_users')),
                    sa.ForeignKeyConstraint(['polygon_id'], ['app.polygons.id'],
                                            name=op.f(
                                                'fk_staff_polygon_id_polygons')),
                    sa.ForeignKeyConstraint(['user_id'], ['app.users.id'],
                                            name=op.f(
                                                'fk_staff_user_id_users')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_staff')),
                    schema='app'
                    )
    op.create_table('trucks',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('body_volume', sa.Integer(), nullable=True),
                    sa.Column('compress_ratio', sa.Integer(), nullable=True),
                    sa.Column('max_weight', sa.Integer(), nullable=False),
                    sa.Column('model_id', sa.Integer(), nullable=False),
                    sa.Column('passport', sa.String(), nullable=False),
                    sa.Column('production_year', sa.Integer(), nullable=False),
                    sa.Column('reg_number', sa.String(), nullable=False),
                    sa.Column('tara', sa.Integer(), nullable=False),
                    sa.Column('type', sa.Enum('BUNKER_CARRIER', 'CAR', 'CARGO',
                                              'CARGO_OTHER', 'DUMP_TRUCK',
                                              'GARBAGE_TRUCK', 'MULTILIFT',
                                              'SCRAP_TRUCK', 'SPECIALIZED',
                                              'SPECIALIZED_OTHER', 'TIPPER',
                                              'TRACTOR', name='trucktype'),
                              nullable=False),
                    sa.ForeignKeyConstraint(['model_id'],
                                            ['app.truck_models.id'], name=op.f(
                            'fk_trucks_model_id_truck_models')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_trucks')),
                    schema='app'
                    )
    op.create_table('permits',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('number', sa.Integer(), nullable=False),
                    sa.Column('truck_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['truck_id'], ['app.trucks.id'],
                                            name=op.f(
                                                'fk_permits_truck_id_trucks')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_permits')),
                    schema='app'
                    )
    op.create_index(op.f('ix_app_permits_number'), 'permits', ['number'],
                    unique=False, schema='app')
    op.create_index(op.f('ix_app_permits_truck_id'), 'permits', ['truck_id'],
                    unique=False, schema='app')
    op.create_table('permissions',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('permit_id', sa.Integer(), nullable=False),
                    sa.Column('owner_id', sa.Integer(), nullable=False),
                    sa.Column('is_tonar', sa.Boolean(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('trailer_id', sa.Integer(), nullable=True),
                    sa.Column('expired_at', sa.DateTime(), nullable=False),
                    sa.Column('added_by_id', sa.Integer(), nullable=True),
                    sa.Column('added_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['added_by_id'], ['app.users.id'],
                                            name=op.f(
                                                'fk_permissions_added_by_id_users')),
                    sa.ForeignKeyConstraint(['owner_id'], ['app.partners.id'],
                                            name=op.f(
                                                'fk_permissions_owner_id_partners')),
                    sa.ForeignKeyConstraint(['permit_id'], ['app.permits.id'],
                                            name=op.f(
                                                'fk_permissions_permit_id_permits')),
                    sa.ForeignKeyConstraint(['trailer_id'], ['app.trailers.id'],
                                            name=op.f(
                                                'fk_permissions_trailer_id_trailers')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_permissions')),
                    schema='app'
                    )
    op.create_table('visits',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('checked_in', sa.DateTime(), nullable=False),
                    sa.Column('checked_out', sa.DateTime(), nullable=True),
                    sa.Column('contract_id', sa.Integer(), nullable=True),
                    sa.Column('delete_reason', sa.String(length=250),
                              nullable=True),
                    sa.Column('invoice_num', sa.String(length=20),
                              nullable=True),
                    sa.Column('driver_id', sa.Integer(), nullable=True),
                    sa.Column('is_deleted', sa.Boolean(), nullable=True),
                    sa.Column('operator_in_id', sa.Integer(), nullable=False),
                    sa.Column('operator_out_id', sa.Integer(), nullable=True),
                    sa.Column('permission_id', sa.Integer(), nullable=False),
                    sa.Column('polygon_id', sa.Integer(), nullable=False),
                    sa.Column('weight_in', sa.Integer(), nullable=False),
                    sa.Column('weight_out', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['contract_id'],
                                            ['app.contracts.id'], name=op.f(
                            'fk_visits_contract_id_contracts')),
                    sa.ForeignKeyConstraint(['driver_id'], ['app.drivers.id'],
                                            name=op.f(
                                                'fk_visits_driver_id_drivers')),
                    sa.ForeignKeyConstraint(['operator_in_id'],
                                            ['app.users.id'], name=op.f(
                            'fk_visits_operator_in_id_users')),
                    sa.ForeignKeyConstraint(['operator_out_id'],
                                            ['app.users.id'], name=op.f(
                            'fk_visits_operator_out_id_users')),
                    sa.ForeignKeyConstraint(['permission_id'],
                                            ['app.permissions.id'], name=op.f(
                            'fk_visits_permission_id_permissions')),
                    sa.ForeignKeyConstraint(['polygon_id'], ['app.polygons.id'],
                                            name=op.f(
                                                'fk_visits_polygon_id_polygons')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_visits')),
                    schema='app'
                    )
    op.create_index(op.f('ix_app_visits_checked_in'), 'visits', ['checked_in'],
                    unique=False, schema='app')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_app_visits_checked_in'), table_name='visits',
                  schema='app')
    op.drop_table('visits', schema='app')
    op.drop_table('permissions', schema='app')
    op.drop_index(op.f('ix_app_permits_truck_id'), table_name='permits',
                  schema='app')
    op.drop_index(op.f('ix_app_permits_number'), table_name='permits',
                  schema='app')
    op.drop_table('permits', schema='app')
    op.drop_table('trucks', schema='app')
    op.drop_table('staff', schema='app')
    op.drop_table('polygon_details', schema='app')
    op.drop_table('partner_details', schema='app')
    op.drop_table('driver_details', schema='app')
    op.drop_index(op.f('ix_app_contracts_number'), table_name='contracts',
                  schema='app')
    op.drop_table('contracts', schema='app')
    op.drop_index(op.f('ix_app_users_phone'), table_name='users', schema='app')
    op.drop_table('users', schema='app')
    op.drop_table('truck_models', schema='app')
    op.drop_table('trailers', schema='app')
    op.drop_table('polygons', schema='app')
    op.drop_table('partners', schema='app')
    op.drop_table('drivers', schema='app')
    op.execute('DROP TYPE userrole;')
    op.execute('DROP TYPE trucktype;')
    # ### end Alembic commands ###
